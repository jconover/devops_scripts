# DevOps tools image based on Ubuntu 24.04 (Noble)
FROM ubuntu:24.04

ARG TARGETARCH
ENV DEBIAN_FRONTEND=noninteractive \
    CLOUDSDK_PYTHON=python3 \
    PATH="/usr/local/bin:/opt/google-cloud-sdk/bin:${PATH}"

SHELL ["/bin/bash", "-euxo", "pipefail", "-c"]

# ---------- Base OS deps ----------
RUN apt-get update -y && \
    apt-get install -y --no-install-recommends \
      ca-certificates curl wget unzip tar xz-utils gzip jq git gnupg \
      software-properties-common apt-transport-https lsb-release \
      python3 python3-pip sudo bash-completion openssl && \
    rm -rf /var/lib/apt/lists/*

# Map TARGETARCH to upstream arches
# (BuildKit sets TARGETARCH to amd64/arm64)
RUN case "${TARGETARCH}" in amd64|arm64) : ;; *) echo "Unsupported TARGETARCH: ${TARGETARCH}"; exit 1 ;; esac

# ---------- HashiCorp APT repo (Terraform) ----------
RUN install -m 0755 -d /etc/apt/keyrings && \
    curl -fsSL https://apt.releases.hashicorp.com/gpg | gpg --dearmor -o /etc/apt/keyrings/hashicorp.gpg && \
    echo "deb [signed-by=/etc/apt/keyrings/hashicorp.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" \
      > /etc/apt/sources.list.d/hashicorp.list

# ---------- Azure CLI repo ----------
RUN install -m 0755 -d /etc/apt/keyrings && \
    curl -fsSL https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor -o /etc/apt/keyrings/microsoft.gpg && \
    echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/microsoft.gpg] https://packages.microsoft.com/repos/azure-cli/ stable main" \
      > /etc/apt/sources.list.d/azure-cli.list

# ---------- Google Cloud SDK repo ----------
RUN install -m 0755 -d /usr/share/keyrings && \
    curl -fsSL https://packages.cloud.google.com/apt/doc/apt-key.gpg | gpg --dearmor -o /usr/share/keyrings/cloud.google.gpg && \
    echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" \
      > /etc/apt/sources.list.d/google-cloud-sdk.list

# ---------- Kubernetes (kubectl) repo: pkgs.k8s.io stable v1.30 ----------
RUN install -m 0755 -d /etc/apt/keyrings && \
    curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.30/deb/Release.key | gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg && \
    echo "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.30/deb/ /" \
      > /etc/apt/sources.list.d/kubernetes.list

# ---------- Install repo-managed tools first ----------
# Terraform via APT (with binary fallback below), Ansible, Azure CLI, gcloud, kubectl
RUN apt-get update -y && \
    apt-get install -y --no-install-recommends \
      ansible azure-cli google-cloud-sdk kubectl && \
    rm -rf /var/lib/apt/lists/*

# Terraform (fallback to official binary if APT unavailable for some reason)
RUN if ! command -v terraform >/dev/null 2>&1; then \
      apt-get update -y && apt-get install -y --no-install-recommends terraform || true; \
    fi && \
    if ! command -v terraform >/dev/null 2>&1; then \
      echo "Terraform APT not available â€” falling back to official binary"; \
      case "${TARGETARCH}" in \
        amd64) TARCH=amd64 ;; \
        arm64) TARCH=arm64 ;; \
      esac; \
      VER="$(curl -fsSL https://checkpoint-api.hashicorp.com/v1/check/terraform | jq -r .current_version)"; \
      curl -fsSLo /tmp/terraform.zip "https://releases.hashicorp.com/terraform/${VER}/terraform_${VER}_linux_${TARCH}.zip"; \
      unzip -o /tmp/terraform.zip -d /usr/local/bin; \
      chmod +x /usr/local/bin/terraform; \
      rm -f /tmp/terraform.zip; \
    fi && \
    terraform -version | head -n1

# ---------- eksctl ----------
RUN case "${TARGETARCH}" in \
      amd64) EARCH=amd64 ;; \
      arm64) EARCH=arm64 ;; \
    esac && \
    curl -fsSL "https://github.com/eksctl-io/eksctl/releases/latest/download/eksctl_Linux_${EARTH:-$EARCH}.tar.gz" \
      | tar -xz -C /usr/local/bin eksctl && \
    chmod +x /usr/local/bin/eksctl && \
    eksctl version

# ---------- Helm ----------
RUN curl -fsSL https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash && \
    helm version --short

# ---------- AWS CLI v2 ----------
RUN case "${TARGETARCH}" in \
      amd64) AWSURL="https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" ;; \
      arm64) AWSURL="https://awscli.amazonaws.com/awscli-exe-linux-aarch64.zip" ;; \
    esac && \
    mkdir -p /tmp/awscli && \
    curl -fsSL "$AWSURL" -o /tmp/awscli/awscliv2.zip && \
    unzip -q /tmp/awscli/awscliv2.zip -d /tmp/awscli && \
    /tmp/awscli/aws/install && \
    rm -rf /tmp/awscli && \
    aws --version

# ---------- gcloud extra: GKE auth plugin ----------
RUN gcloud components install gke-gcloud-auth-plugin -q || true

# ---------- Flux CLI ----------
RUN curl -s https://fluxcd.io/install.sh | bash && \
    flux --version

# ---------- Completions (optional) ----------
RUN echo 'source /etc/bash_completion' >> /etc/bash.bashrc || true && \
    echo 'source <(kubectl completion bash)' >> /etc/bash.bashrc && \
    echo 'complete -C /usr/local/bin/terraform terraform' >> /etc/bash.bashrc || true && \
    echo 'source <(helm completion bash)' >> /etc/bash.bashrc && \
    echo 'source <(flux completion bash)' >> /etc/bash.bashrc

# ---------- Non-root user ----------
RUN useradd -ms /bin/bash devops && \
    echo "devops ALL=(ALL) NOPASSWD:ALL" > /etc/sudoers.d/99-devops && chmod 0440 /etc/sudoers.d/99-devops
USER devops
WORKDIR /home/devops

# ---------- Basic checks (don't fail build if offline) ----------
RUN set +e; \
    kubectl version --client --short || true; \
    eksctl version || true; \
    terraform -version | head -n1 || true; \
    helm version --short || true; \
    az version 2>/dev/null | head -n1 || true; \
    gcloud version | head -n1 || true; \
    aws --version || true; \
    flux --version || true

CMD ["/bin/bash"]

# DevOps tools image based on Ubuntu 24.04 (Noble)